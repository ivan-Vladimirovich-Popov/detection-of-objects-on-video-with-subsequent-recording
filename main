import cv2
import numpy as np
names=r"coco.names.txt"
tini=r"yolov4-tiny.cfg"
tini_weight=r"yolov4-tiny.weights"


def apply_yolo_object_detection(image_to_process):
    try:
        height, width, _ = image_to_process.shape
        blob = cv2.dnn.blobFromImage(image_to_process, 1 / 255, (608, 608),
                                     (0, 0, 0), swapRB=True, crop=False)
        net.setInput(blob)
        outs = net.forward(out_layers)
        class_indexes, class_scores, boxes = ([] for i in range(3))
        objects_count = 0
        for out in outs:
            for obj in out:
                scores = obj[5:]
                class_index = np.argmax(scores)
                class_score = scores[class_index]
                if class_score > 0:
                    center_x = int(obj[0] * width)
                    center_y = int(obj[1] * height)
                    obj_width = int(obj[2] * width)
                    obj_height = int(obj[3] * height)
                    box = [center_x - obj_width // 2, center_y - obj_height // 2,
                           obj_width, obj_height]
                    boxes.append(box)
                    class_indexes.append(class_index)
                    class_scores.append(float(class_score))

        # Selection
        chosen_boxes = cv2.dnn.NMSBoxes(boxes, class_scores, 0.0, 0.4)
        for box_index in chosen_boxes:
            box_index = box_index
            box = boxes[box_index]
            class_index = class_indexes[box_index]
            if classes[class_index] in classes_to_look_for:
                objects_count += 1
                image_to_process = draw_object_bounding_box(image_to_process,
                                                            class_index, box)

        final_image = draw_object_count(image_to_process, objects_count)
        return final_image
    except AttributeError:
        print("error atribut")



def draw_object_bounding_box(image_to_process, index, box):
    x, y, w, h = box
    start = (x, y)
    end = (x + w, y + h)
    color = (0, 255, 0)
    width = 2
    final_image = cv2.rectangle(image_to_process, start, end, color, width)

    start = (x, y - 10)
    font_size = 1
    font = cv2.FONT_HERSHEY_SIMPLEX
    width = 2
    text = classes[index]
    final_image = cv2.putText(final_image, text, start, font,
                              font_size, color, width, cv2.LINE_AA)

    return final_image



def draw_object_count(image_to_process, objects_count):
    start = (10, 120)
    font_size = 1.5
    font = cv2.FONT_HERSHEY_SIMPLEX
    width = 3
    text = "Objects found: " + str(objects_count)

    # Text output with a stroke
    # (so that it can be seen in different lighting conditions of the picture)
    white_color = (255, 255, 255)
    black_outline_color = (0, 0, 0)
    final_image = cv2.putText(image_to_process, text, start, font, font_size,
                              black_outline_color, width * 3, cv2.LINE_AA)
    final_image = cv2.putText(final_image, text, start, font, font_size,
                              white_color, width, cv2.LINE_AA)

    return final_image

def start_video_object_detection(video: str):
    while True:
        video_camera_capture = cv2.VideoCapture(video)
        w = int(video_camera_capture.get(cv2.CAP_PROP_FRAME_WIDTH))
        h = int(video_camera_capture.get(cv2.CAP_PROP_FRAME_HEIGHT))
        fps = int(video_camera_capture.get(cv2.CAP_PROP_FPS))
        fourcc = cv2.VideoWriter_fourcc(*'mp4v')
        writer = cv2.VideoWriter("person_and_car.mp4", fourcc, fps, (w, h))
        try:
            while video_camera_capture.isOpened():
                ret, frame = video_camera_capture.read()
                frame_object = apply_yolo_object_detection(frame)
                frame_object_resize = cv2.resize(frame_object, (1920 // 2, 1080 // 2))
                cv2.imshow("Video Capture", frame_object_resize)
                cv2.waitKey(1)
                writer.write(frame)
            video_camera_capture.release()
            cv2.destroyAllWindows()

        except KeyboardInterrupt:
            pass
        break


if __name__ == '__main__':
    net = cv2.dnn.readNetFromDarknet(tini,tini_weight)
    layer_names = net.getLayerNames()
    out_layers_indexes = net.getUnconnectedOutLayers()
    out_layers = [layer_names[index - 1] for index in out_layers_indexes]

    with open(names) as file:
        classes = file.read().split("\n")

    video = input("Path to video (or URL): ")
    look_for = input("What we are looking for: ").split(',')


    list_look_for = []
    for look in look_for:
        list_look_for.append(look.strip())

    classes_to_look_for = list_look_for

    start_video_object_detection(video)
